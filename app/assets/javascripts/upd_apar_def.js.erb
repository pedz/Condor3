/*
 * I'd like to get rid of both the $.views.tags and $views.helpers
 * from this file.  The helpers is just a debugging helper.  The
 * link_to is needed but I think it can be part of the template.  I
 * just need to figure out how to do that.
 */
$.views.tags({
    /*
     * This is used by template2.  It is roughly the same idea as Rails' link_to
     */
    link_to: function (link, klass, text) {
	return $.render.template2({link: link, klass: klass, text: text});
    }
});

$.views.helpers({
    /*
     * A helper function called ~log('whatever') that returns an empty
     * string and prints the argument to Firebug's console
     */
    log: function(a) {
	console.log(a);
	return "";
    },

    swinfo_path: function (a) {
	condor3.routes.swinfo_full_path(a , 'defect, apar, ptf', 1);
    }
});

/* Assume condor3.js has already defined condor3 object. */
condor3.upd_apar_def_ready_func = function () {
    condor3.setup_helpers();
    return condor3.upd_apar_def_ready_func_real(window.location.href);
};

/*
 * Copy the routes created by js-routes to be helpers.  Somehow,
 * putting them directly into helpers at build time causes problems --
 * at least during testing.
 */
condor3.setup_helpers = function () {
    /*
     * If this is done during load time, something screws up so do it
     * on the ready event.
     */
    var routes = condor3.routes;
    Object.getOwnPropertyNames(routes).forEach(function (propName) {
	var prop = routes[propName];

	if (typeof prop === 'function') {
	    $.views.helpers({ propName: prop });
	}
    });
};

condor3.upd_apar_def_ready_func_real = function (currentLocation) {
    /*
     * Some container element (like a div) bundles the table with the
     * script.  Its class is upd-apar-defs-container.  In theory, the
     * code should be able to cope with a sequence of these
     * containers.  That part has not been implemented yet (its not
     * currently needed).
     */
    var containers = $('.upd-apar-defs-container');
    var tbody = containers.first().children('table').children('tbody');
    var script_element = containers.first().children('script');

    /*
     * The code in here is used only for the class='upd_apar_defs'
     * table.  If the page does not have that table, then we just want to
     * exit.  Otherwise, we get various javascript errors.
     */
    if (tbody.length === 0 || script_element.length === 0) {
	return;
    }

    /* Called from an event */
    var upd_apar_defs_click = function (event) {
	var arrow_span = $(this);
	var td = arrow_span.parents('td');
	var ui = td.find('.upd_apar_def_commands');
	var link = td.find('.upd_apar_def_link');

	var pickLi = function (event) {
	    ui.contextMenu('close');
	};

	arrow_span.hide();
	var frog = ui.contextMenu({
	    close: function () {
		arrow_span.show();
		ui.off('click', 'li', pickLi);
	    },
	    bottom: -ui.outerHeight(),
	    left: link.width() - ui.width()
	}).on('click', 'li', pickLi);
	return false;
    };

    var currentLocationArray = currentLocation.split('/');
    var pageIndex = currentLocationArray.length - 1;
    var sortIndex = pageIndex - 1;
    var lastPage = parseInt(currentLocationArray[pageIndex]);

    /*
     * Decorate header with the up and down arrows to indicate how the
     * table is sorted
     */
    var sortOrder = currentLocationArray[sortIndex].replace(/%20/g, ' ').split(/, */)
	    .map(function (column, index) {
		var prefix;
		var dir;
		var klass;
	
		if (column[0] == "-") {
		    prefix = "-";
		    dir = "sort-down";
		    column = column.slice(1);
		} else {
		    prefix = "";
		    dir = "sort-up";
		}
		klass = 'upd_apar_def-' + column;
		$('th.' + klass + ' .sort')
		    .removeClass('sortable')
		    .addClass(dir)
		    .addClass('sort-pos-' + (index + 1));
		return {
		    prefix: prefix,
		    column: column
		};
	    });

    /*
     * Return the URL for next page that we need to fetch
     */
    var xjxjxjxj = function () {
	var tmp;
	lastPage += 1;
	tmp =  currentLocationArray.slice(0, pageIndex);
	tmp.push(lastPage);
	return tmp.join('/') + '.json';
    };

    var myScrollFunction = function (event) {
	var wh = $(window).height();
	var ds = $(document).scrollTop();
	var tr = $('table.upd_apar_defs tbody tr');
	tr = $(tr[tr.length - 1]);
	var h = tr.height();
	var o = tr.offset();
	var top = o.top;

	if ((ds + wh) > (top - (100 * h))) {
	    $(window).off('scroll', myScrollFunction);
	    $.when( $.get(xjxjxjxj(), null, null, 'json') )
		.done(function (atad, status, jqXHR) {
		    /* reached the end of the atad */
		    if (atad.length == 0)
			return;
		    
		    var offset = $('.upd_apar_defs tbody tr').length + 1;
		    $('.upd_apar_defs tbody').append($.render.template1({items: atad, offset: offset}));
		    /* Hook back up for next page */
		    $(window).on('scroll', myScrollFunction);
		})
		.fail(function (a, b, c) { alert('Fetch of additional results failed'); });
	}
    };

    var alterSort = function(event) {
	var th = $(this).parent();
	var klass = th.attr('class');
	var column = klass.split('-')[1];
	var urlArray;

	if (column == sortOrder[0].column) {
	    if (sortOrder[0].prefix == "-")
		sortOrder[0].prefix = "";
	    else
		sortOrder[0].prefix = "-";
	} else if (column == sortOrder[1].column) {
	    sortOrder = [ sortOrder[1], sortOrder[0], sortOrder[2] ];
	} else if (column == sortOrder[2].column) {
	    sortOrder = [ sortOrder[2], sortOrder[0], sortOrder[1] ];
	} else {
	    sortOrder = [ { prefix: "", column: column }, sortOrder[0], sortOrder[1] ];
	}
	urlArray = currentLocationArray.slice(0, sortIndex);
	urlArray.push(
	    sortOrder.map(function(columnSpec) {
		return columnSpec.prefix + columnSpec.column;
	    }).join(', '));
	urlArray.push(1);
	window.location = urlArray.join('/');
    };

    $('.upd_apar_defs')
	.on('click', '.upd_apar_def_inner_td_span', upd_apar_defs_click)
	.on('click', '.upd_apar_defs_header_span', alterSort);
    $(window).on('scroll', myScrollFunction);

    $.when( $.get("<%= asset_path('t1.html') %>", null, null, 'html') ).done(function (data, status, jqXHR) {
	// data is a string.  $(data) turns into an array of HTML
	// elements.  Often it is just one but if we get them ganged
	// into one file, they will be more than one.
	$(data).each(function () {
	    // We assume the outside element is just a container.  I
	    // use <script id='template1' type='text/x-jsrender'> but
	    // it can be anything I suppose.  The id of the container
	    // becomes the template's name while the contents becomes
	    // the template.
	    $.templates(this.id, $(this).html());
	    return this;
	});
	tbody.html($.render.template1({items: JSON.parse(script_element[0].text), offset: 1}));
    }).fail(function (a, b, c) {
	alert('Fetch of template failed');
    });
};

$(document).ready(condor3.upd_apar_def_ready_func);
